function grampc_update_plot_sim(vec,ph,idx,decimation)
% This function updates the simulation plot of GRAMPC. The figure
% specified via the plot handle ph must have been generated by
% the function grampc_init_plot_sim.
%
% Input arguments are:
% 1) vec - solution struct
% 2) ph - plot handle generated by grampc_init_plot_sol
% 3) idx - index struct that specifies the quantities to be plotted (optional)
% 4) decimation - factor for downsampling the plot (optional)
%
%
% This file is part of GRAMPC - (https://github.com/grampc/grampc)
%
% GRAMPC -- A software framework for embedded nonlinear model predictive
% control using a gradient-based augmented Lagrangian approach
%
% Copyright 2014-2025 by Knut Graichen, Andreas Voelz, Thore Wietzke,
% Tobias Englert (<v2.3), Felix Mesmer (<v2.3), Soenke Rhein (<v2.3),
% Bartosz Kaepernick (<v2.0), Tilman Utz (<v2.0).
% All rights reserved.
%
% GRAMPC is distributed under the BSD-3-Clause license, see LICENSE.txt
%

if nargin < 3 || isempty(idx)
    idx.States = 1:size(vec.x,1);
    idx.Controls = 1:size(vec.u,1);
    if isfield(vec,'constr')
        idx.Constraints = 1:size(vec.constr,1);
    else
        idx.Constraints = [];
    end
end
if nargin < 4 || isempty(decimation)
    decimation = 1;
end

% Update handles
% plot states and adj. states
for i = idx.States
    set(ph.s1(i),'YData',vec.x(i,1:decimation:end))
    set(ph.s2(i),'YData',vec.adj(i,1:decimation:end))
end
adapt_ylim(vec.x(idx.States,:),ph.s1);
adapt_ylim(vec.adj(idx.States,:),ph.s2);

% plot controls
for i = idx.Controls
    set(ph.s3(i),'YData',vec.u(i,1:decimation:end))
end
adapt_ylim(vec.u(idx.Controls,:),ph.s3);

if ~isempty(idx.Constraints)
    for i = idx.Constraints
        % Constraints
        set(ph.s4(i),'YData',vec.constr(i,1:decimation:end))
        % mult
        set(ph.s5(i),'YData',vec.mult(i,1:decimation:end))
        % pen
        set(ph.s6(i),'YData',vec.pen(i,1:decimation:end))
    end
    adapt_ylim([vec.constr(idx.Constraints,:) vec.constr(idx.Constraints,1)*0],ph.s4);
    adapt_ylim(vec.mult(idx.Constraints,:),ph.s5);
    adapt_ylim(vec.pen(idx.Constraints,:),ph.s6);
end
end